[tool.poetry]
name = "datahut-duckhouse"
version = "0.1.0"
description = "A hybrid data stack combining DuckDB, Iceberg, Arrow Flight, and dbt"
authors = ["Geobatpo07 <lgeobatpo98@gmail.com>"]
readme = "README.md"
packages = [{ include = "datahut_duckhouse" }]


[tool.poetry.dependencies]
# Indique clairement la version de Python requise
python = ">=3.11"
duckdb = "*"
pyarrow = {extras = ["flight"], version = "*"}
pandas = "*"
grpcio = "*"
grpcio-tools = "*"
pyiceberg = ">=0.9.0"
dbt-core = ">=1.9.0"
dbt-duckdb = ">=1.9.2"
dbt-trino = ">=1.9.0"
s3fs = "*"
boto3 = "*"
python-dotenv = "*"
xorq = ">=0.2.2"
urllib3 = ">=2.2.3"
opentelemetry-api = ">=1.14.0"
opentelemetry-sdk = ">=1.14.0"
opentelemetry-exporter-jaeger = ">=1.14.0"
opentelemetry-instrumentation-grpc = ">=0.48b0"
psutil = ">=5.9.0"
trino = ">=0.328.0"
numpy = ">=1.24.0"
registry = ">=0.4.2,<0.5.0"
deprecated = "1.2.18"
fastapi = "^0.116.0"
uvicorn = "^0.24.0"
pydantic = "^2.9.0"
sqlalchemy = "^2.0.0"

[tool.poetry.group.dev.dependencies]
ipython = "^9.0.2"
ruff = "^0.6.7"
pytest = "^8.0.0"
pytest-cov = "^4.0.0"
pytest-asyncio = { version = "^0.24.0", markers = "python_version >= '3.8'" }
mypy = "^1.8.0"
black = "^24.0.0"
isort = "^5.13.0"
flake8 = "^7.0.0"
pre-commit = "^3.6.0"
sphinx = "^7.2.0"
sphinx-rtd-theme = "^2.0.0"
bandit = "^1.7.0"
safety = "^3.0.0"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 88
target-version = "py311"

[tool.ruff.lint]
select = ["E", "F", "W", "I", "N", "UP", "B", "A", "C4", "T20"]
ignore = ["E501", "W503"]

[tool.black]
line-length = 88
target-version = ['py311']

[tool.isort]
profile = "black"
line_length = 88

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --cov=flight_server --cov=scripts --cov-report=term-missing"
testpaths = ["tests"]

[tool.coverage.run]
source = ["flight_server", "scripts"]
omit = ["tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]
